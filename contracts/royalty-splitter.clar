(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-SONG-ID u101)
(define-constant ERR-INVALID-SPLIT u102)
(define-constant ERR-INVALID-SHARE u103)
(define-constant ERR-INVALID-AMOUNT u104)
(define-constant ERR-INSUFFICIENT-FUNDS u105)
(define-constant ERR-SPLIT-ALREADY-DEFINED u106)
(define-constant ERR-SPLIT-NOT-FOUND u107)
(define-constant ERR-INVALID-PRINCIPAL u108)
(define-constant ERR-MAX-SPLITS-EXCEEDED u109)
(define-constant ERR-DUPLICATE-ARTIST u110)
(define-constant ERR-PAUSED u111)
(define-constant ERR-INVALID-UPDATE u112)
(define-constant ERR-UPDATE-NOT-ALLOWED u113)
(define-constant ERR-INVALID-PAUSE-STATE u114)
(define-constant ERR-INVALID-BASIS-POINTS u115)
(define-constant ERR-ARITHMETIC-OVERFLOW u116)
(define-constant ERR-ARITHMETIC-UNDERFLOW u117)
(define-constant ERR-INVALID-MIN-SHARE u118)
(define-constant ERR-INVALID-MAX-SHARE u119)
(define-constant ERR-SONG-OWNER-NOT-SET u120)

(define-data-var next-song-id uint u0)
(define-data-var max-splits-per-song uint u10)
(define-data-var basis-points uint u10000)
(define-data-var paused bool false)
(define-data-var min-share uint u1)
(define-data-var max-share uint u10000)
(define-data-var admin principal tx-sender)

(define-map song-splits uint (list 10 { artist: principal, share: uint }))
(define-map song-owners uint principal)
(define-map song-updates uint { update-timestamp: uint, updater: principal })
(define-map artist-shares { song-id: uint, artist: principal } uint)

(define-read-only (get-song-split (song-id uint))
  (map-get? song-splits song-id)
)

(define-read-only (get-song-owner (song-id uint))
  (map-get? song-owners song-id)
)

(define-read-only (get-artist-share (song-id uint) (artist principal))
  (map-get? artist-shares { song-id: song-id, artist: artist })
)

(define-read-only (get-song-update (song-id uint))
  (map-get? song-updates song-id)
)

(define-read-only (is-paused)
  (var-get paused)
)

(define-read-only (get-basis-points)
  (var-get basis-points)
)

(define-private (validate-song-id (id uint))
  (if (> id u0)
      (ok true)
      (err ERR-INVALID-SONG-ID))
)

(define-private (validate-share (share uint))
  (if (and (>= share (var-get min-share)) (<= share (var-get max-share)))
      (ok true)
      (err ERR-INVALID-SHARE))
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
      (ok true)
      (err ERR-INVALID-AMOUNT))
)

(define-private (validate-principal (p principal))
  (if (not (is-eq p 'SP000000000000000000002Q6VF78))
      (ok true)
      (err ERR-INVALID-PRINCIPAL))
)

(define-private (validate-splits-length (splits (list 10 { artist: principal, share: uint })))
  (if (<= (len splits) (var-get max-splits-per-song))
      (ok true)
      (err ERR-MAX-SPLITS-EXCEEDED))
)

(define-private (validate-no-duplicate-artists (splits (list 10 { artist: principal, share: uint })))
  (let ((artists (map get artist splits)))
    (if (is-eq (len artists) (len (unwrap-panic (as-max-len? (fold unique-artists artists (list)) u10))))
        (ok true)
        (err ERR-DUPLICATE-ARTIST)))
)

(define-private (unique-artists (artist principal) (acc (list 10 principal)))
  (if (is-some (index-of acc artist))
      acc
      (unwrap-panic (as-max-len? (append acc artist) u10)))
)

(define-private (validate-total-shares (splits (list 10 { artist: principal, share: uint })))
  (let ((total (fold + (map get share splits) u0)))
    (if (is-eq total (var-get basis-points))
        (ok true)
        (err ERR-INVALID-SPLIT)))
)

(define-private (is-owner (song-id uint) (caller principal))
  (match (map-get? song-owners song-id)
    owner (is-eq owner caller)
    false)
)

(define-public (set-admin (new-admin principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-principal new-admin))
    (var-set admin new-admin)
    (ok true)
  )
)

(define-public (set-paused (state bool))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (is-eq state (var-get paused))) (err ERR-INVALID-PAUSE-STATE))
    (var-set paused state)
    (ok true)
  )
)

(define-public (set-basis-points (new-basis uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (> new-basis u0) (err ERR-INVALID-BASIS-POINTS))
    (var-set basis-points new-basis)
    (ok true)
  )
)

(define-public (set-min-share (new-min uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (and (> new-min u0) (<= new-min (var-get max-share))) (err ERR-INVALID-MIN-SHARE))
    (var-set min-share new-min)
    (ok true)
  )
)

(define-public (set-max-share (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (and (>= new-max (var-get min-share)) (<= new-max (var-get basis-points))) (err ERR-INVALID-MAX-SHARE))
    (var-set max-share new-max)
    (ok true)
  )
)

(define-public (set-max-splits (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (> new-max u0) (err ERR-MAX-SPLITS-EXCEEDED))
    (var-set max-splits-per-song new-max)
    (ok true)
  )
)

(define-public (define-split (song-id uint) (splits (list 10 { artist: principal, share: uint })))
  (begin
    (asserts! (not (var-get paused)) (err ERR-PAUSED))
    (try! (validate-song-id song-id))
    (try! (validate-splits-length splits))
    (try! (validate-no-duplicate-artists splits))
    (map validate-principal (map get artist splits))
    (map validate-share (map get share splits))
    (try! (validate-total-shares splits))
    (asserts! (is-none (map-get? song-splits song-id)) (err ERR-SPLIT-ALREADY-DEFINED))
    (map-set song-splits song-id splits)
    (map-set song-owners song-id tx-sender)
    (fold set-artist-share splits song-id)
    (print { event: "split-defined", song-id: song-id })
    (ok true)
  )
)

(define-private (set-artist-share (split { artist: principal, share: uint }) (song-id uint))
  (begin
    (map-set artist-shares { song-id: song-id, artist: (get artist split) } (get share split))
    song-id
  )
)

(define-public (update-split (song-id uint) (new-splits (list 10 { artist: principal, share: uint })))
  (begin
    (asserts! (not (var-get paused)) (err ERR-PAUSED))
    (asserts! (is-owner song-id tx-sender) (err ERR-NOT-AUTHORIZED))
    (try! (validate-song-id song-id))
    (try! (validate-splits-length new-splits))
    (try! (validate-no-duplicate-artists new-splits))
    (map validate-principal (map get artist new-splits))
    (map validate-share (map get share new-splits))
    (try! (validate-total-shares new-splits))
    (asserts! (is-some (map-get? song-splits song-id)) (err ERR-SPLIT-NOT-FOUND))
    (map-set song-splits song-id new-splits)
    (map-set song-updates song-id { update-timestamp: block-height, updater: tx-sender })
    (fold update-artist-share new-splits song-id)
    (print { event: "split-updated", song-id: song-id })
    (ok true)
  )
)

(define-private (update-artist-share (split { artist: principal, share: uint }) (song-id uint))
  (begin
    (map-set artist-shares { song-id: song-id, artist: (get artist split) } (get share split))
    song-id
  )
)

(define-public (distribute-royalties (song-id uint) (amount uint))
  (let ((splits (unwrap! (map-get? song-splits song-id) (err ERR-SPLIT-NOT-FOUND))))
    (asserts! (not (var-get paused)) (err ERR-PAUSED))
    (try! (validate-song-id song-id))
    (try! (validate-amount amount))
    (asserts! (>= (as-contract (stx-get-balance tx-sender)) amount) (err ERR-INSUFFICIENT-FUNDS))
    (let ((payouts (map calculate-and-transfer splits amount)))
      (print { event: "royalties-distributed", song-id: song-id, total-amount: amount })
      (ok payouts)
    )
  )
)

(define-private (calculate-and-transfer (split { artist: principal, share: uint }) (amount uint))
  (let ((share-amount (/ (* amount (get share split)) (var-get basis-points))))
    (asserts! (> share-amount u0) (err ERR-ARITHMETIC-UNDERFLOW))
    (try! (stx-transfer? share-amount tx-sender (get artist split)))
    share-amount
  )
)

(define-public (get-next-song-id)
  (ok (var-get next-song-id))
)

(define-public (increment-song-id)
  (begin
    (var-set next-song-id (+ (var-get next-song-id) u1))
    (ok (var-get next-song-id))
  )
)